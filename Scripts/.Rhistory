output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- fluidPage(shinytheme("darkly"),
h1("The Mining Stock Scale"),
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
plotOutput("plot")
)
shinyApp(ui = ui, server = server)
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider33*DF$G3
return(DF)
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- fluidPage(shinytheme("darkly"),
h1("The Mining Stock Scale"),
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
plotOutput("plot")
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider33*DF$G3
return(DF)
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
),
plotOutput("plot")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider33*DF$G3
return(DF)
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
),
plotOutput("plot")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF<-read.csv("./Data/course-proj-data.csv", sep=";")
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider33*DF$G3
return(DF)
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
),
plotOutput("plot")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", heqader = T,sep=";")
attach(DF)
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider33*DF$G3
return(DF)
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
),
plotOutput("plot", brush= "user_brush")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", heqader = T,sep=";")
attach(DF)
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider3*DF$G3
return(DF)
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
),
plotOutput("plot", brush= "user_brush")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", heqader = T,sep=";")
attach(DF)
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider3*DF$G3
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20),
),
plotOutput("plot", brush= "user_brush")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", heqader = T,sep=";")
attach(DF)
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider3*DF$G3
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20,step = 0.2),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20,step = 0.2),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20,step = 0.2),
),
plotOutput("plot", brush= "user_brush")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", heqader = T,sep=";")
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider3*DF$G3
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20,step = 0.2),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20,step = 0.2),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20,step = 0.2),
),
plotOutput("plot", brush= "user_brush")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
installed.packages("DT")
installed.packages("DT")
## A basic shiny app
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", heqader = T,sep=";")
DF$Grade = 1*DF$G1 + 1*DF$G2 + 1*DF$G3
## Using Input Widgets
server <- function(input,output, session) {
data <- reactive({
DF$Grade =input$Slider1*DF$G1 + input$Slider2*DF$G2 + input$Slider3*DF$G3
})
output$plot <- renderPlot({
ggplot(data(), aes(data$Grade,data$MarketCap.in.M)) + geom_point(shape=1) + geom_smooth(method=lm)
})
}
ui <- navbarpage(shinytheme("darkly"), title = h3"The Mining Stock Scale",
####To make multiple tabs, you call tabPanel and put everything isnide it. Repeat for as many tabs as you want####
tabPanel(("Adjust your mining Stocks"),
##well panel is excellent for grouping things together
WellPanel(
sliderInput(inputId = "Slider1",
label = "Weight on Grade 1",
value = 1, min = 1, max = 20,step = 0.2),
sliderInput(inputId = "Slider2",
label = "Weight on Grade 2",
value = 1, min = 1, max = 20,step = 0.2),
sliderInput(inputId = "Slider3",
label = "Weight on Grade 3",
value = 1, min = 1, max = 20,step = 0.2),
),
plotOutput("plot", brush= "user_brush")
DT::dataTableOutput("table")
downloadbutton(outputID = "mydownload",label="Download Table")),
tabPanel("Documentation",
h4("Video documentation - Embedded from Youtube"),
tags$iframe(src="https://www.youtube.com/embed/vySGuusQI3Y"),
style="height:900px;width:900px"),
tabPanel("Data table with the underlying Data",
DT::dataTableOutput("tableDT"))
)
shinyApp(ui = ui, server = server)
installed.packages(DT)
install.packages("DT")
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
library(shiny); runApp('ShinyUdemyCourseSolution.R')
runApp('ShinyUdemyCourseSolution.R')
library(shiny); runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
library(shiny)
library(ggplot2)
library(shinythemes) # adding the shinythemese package
library(DT)
DF<-read.csv("./Data/course-proj-data.csv", header = T,sep=";")
DF$Grade = as.double(1*DF$G1 + 1*DF$G2 + 1*DF$G3)
as.double((DF$Grade))
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('ShinyUdemyCourseSolution.R')
runApp('ShinyUdemyCourseSolution.R')
runApp('ShinyUdemyCourseSolution.R')
runApp('ShinyUdemyCourseSolution.R')
mydata = read.csv(".Data/miningData.csv", header = T, sep = ";")
runApp('ShinyUdemyCourseSolution.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='yjs1210',
token='D2F8851B9C015835D997369CE7DE4739',
secret='SzFKosNTDYQGdgmkUJOJZUKGU4yxYahWw5Ty82Th')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
runApp('RShinyUdemyMyCode.R')
